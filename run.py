#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ููู ุงูุชุดุบูู ุงูุฑุฆูุณู ูุจูุช ุชูููุฌุฑุงู ุงูุฐูู
"""

import os
import sys
import logging
from pathlib import Path

# ุฅุถุงูุฉ ุงููุฌูุฏ ุงูุญุงูู ููุณุงุฑ Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def setup_environment():
    """ุฅุนุฏุงุฏ ุงูุจูุฆุฉ"""
    try:
        # ุฅูุดุงุก ุงููุฌูุฏุงุช ุงููุทููุจุฉ
        folders = ['uploads', 'outputs', 'logs']
        for folder in folders:
            Path(folder).mkdir(exist_ok=True)
        
        # ุฅุนุฏุงุฏ ุงูุชุณุฌูู
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/bot.log', encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        logging.info("ุชู ุฅุนุฏุงุฏ ุงูุจูุฆุฉ ุจูุฌุงุญ")
        return True
        
    except Exception as e:
        print(f"ุฎุทุฃ ูู ุฅุนุฏุงุฏ ุงูุจูุฆุฉ: {e}")
        return False

def check_dependencies():
    """ุงูุชุญูู ูู ุงูููุชุจุงุช ุงููุทููุจุฉ"""
    try:
        import telegram
        import google.generativeai
        import PyPDF2
        import docx
        import openpyxl
        import requests
        import bs4
        import duckduckgo_search
        
        logging.info("ุฌููุน ุงูููุชุจุงุช ูุชููุฑุฉ")
        return True
        
    except ImportError as e:
        print(f"ููุชุจุฉ ููููุฏุฉ: {e}")
        print("ูุฑุฌู ุชุซุจูุช ุงูููุชุจุงุช ุงููุทููุจุฉ:")
        print("pip install -r requirements.txt")
        return False

def check_config():
    """ุงูุชุญูู ูู ุงูุฅุนุฏุงุฏุงุช"""
    try:
        from config import TELEGRAM_TOKEN, GEMINI_API_KEY, ADMIN_USER_ID
        
        if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "your-telegram-token":
            print("โ ุฎุทุฃ: ูุฑุฌู ุชุนููู TELEGRAM_TOKEN ูู config.py")
            return False
        
        if not GEMINI_API_KEY or GEMINI_API_KEY == "your-gemini-api-key":
            print("โ ุฎุทุฃ: ูุฑุฌู ุชุนููู GEMINI_API_KEY ูู config.py")
            return False
        
        if not ADMIN_USER_ID or ADMIN_USER_ID == 0:
            print("โ ุฎุทุฃ: ูุฑุฌู ุชุนููู ADMIN_USER_ID ูู config.py")
            return False
        
        logging.info("ุชู ุงูุชุญูู ูู ุงูุฅุนุฏุงุฏุงุช ุจูุฌุงุญ")
        return True
        
    except Exception as e:
        print(f"ุฎุทุฃ ูู ุงูุชุญูู ูู ุงูุฅุนุฏุงุฏุงุช: {e}")
        return False

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print("๐ ุจุฏุก ุชุดุบูู ุจูุช ุชูููุฌุฑุงู ุงูุฐูู...")
    print("=" * 50)
    
    # ุฅุนุฏุงุฏ ุงูุจูุฆุฉ
    if not setup_environment():
        print("โ ูุดู ูู ุฅุนุฏุงุฏ ุงูุจูุฆุฉ")
        sys.exit(1)
    
    # ุงูุชุญูู ูู ุงูููุชุจุงุช
    if not check_dependencies():
        print("โ ูุดู ูู ุงูุชุญูู ูู ุงูููุชุจุงุช")
        sys.exit(1)
    
    # ุงูุชุญูู ูู ุงูุฅุนุฏุงุฏุงุช
    if not check_config():
        print("โ ูุดู ูู ุงูุชุญูู ูู ุงูุฅุนุฏุงุฏุงุช")
        sys.exit(1)
    
    print("โ ุฌููุน ุงููุญูุตุงุช ูุฌุญุช!")
    print("๐ค ุจุฏุก ุชุดุบูู ุงูุจูุช...")
    print("=" * 50)
    
    try:
        # ุงุณุชูุฑุงุฏ ูุชุดุบูู ุงูุจูุช
        from telegram_bot import TelegramBot
        
        bot = TelegramBot()
        bot.run()
        
    except KeyboardInterrupt:
        print("\n๐ ุชู ุฅููุงู ุงูุจูุช ุจูุงุณุทุฉ ุงููุณุชุฎุฏู")
        logging.info("ุชู ุฅููุงู ุงูุจูุช ุจูุงุณุทุฉ ุงููุณุชุฎุฏู")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุชุดุบูู ุงูุจูุช: {e}")
        logging.error(f"ุฎุทุฃ ูู ุชุดุบูู ุงูุจูุช: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()